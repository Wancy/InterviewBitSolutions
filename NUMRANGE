Given an array of non negative integers A, and a range (B, C), 
find the number of continuous subsequences in the array which have sum S in the range [B, C] or B <= S <= C

Continuous subsequence is defined as all the numbers A[i], A[i + 1], .... A[j]
where 0 <= i <= j < size(A)

Example :

A : [10, 5, 1, 0, 2]
(B, C) : (6, 8)
ans = 3 
as [5, 1], [5, 1, 0], [5, 1, 0, 2] are the only 3 continuous subsequence with their sum in the range [6, 8]

/////////////////////////////////////////////////////////////////

public class Solution {
	public int numRange(ArrayList<Integer> a, int b, int c) {
	    if (a == null || a.size() == 0 || b > c) return 0;
	    int res = 0;
	    int sum = 0;
	    for (int i = 0; i < a.size(); i++) {
	        sum += a.get(i);
	        int j = i + 1;
	        while (sum <= c) {
	            
	            if (sum >= b) {
	                res++;
	            }
	            if (j >= a.size()) break;
	            sum += a.get(j);
	            j++;
	        } 
	        sum = 0;
	    }
	    
	    return res;
	}
}
