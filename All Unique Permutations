Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example :
[1,1,2] have the following unique permutations:

[1,1,2]
[1,2,1]
[2,1,1]

////////////////////////////////////////////////////////////////

public class Solution {
	public ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> a) {
	    Collections.sort(a);
	    boolean[] visited = new boolean[a.size()];
	    ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
	    helper(res, new ArrayList<Integer>(), visited, a);
	    return res;
	}
	
	private void helper(ArrayList<ArrayList<Integer>> res, 
	    ArrayList<Integer> list, boolean[] visited, ArrayList<Integer> a) {
	    if (list.size() == a.size()) {
	        res.add(new ArrayList<Integer>(list));
	    }
	    for (int i = 0; i < a.size(); i++) {
	        if (visited[i] || 
	            i > 0 && a.get(i) == a.get(i - 1) && !visited[i - 1])
	            continue;
	        list.add(a.get(i));
	        visited[i] = true;
	        helper(res, list, visited, a);
	        list.remove(list.size() - 1);
	        visited[i] = false;
	    }
	}
}
